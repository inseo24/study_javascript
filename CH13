- 자바스크립트의 스코프가 다른 언어의 스코프와 구별되는 것이 무엇일지 생각하기
- var, let, const 키워드로 선언한 변수의 스코프는 각기 다르게 동작함

모든 식별자(변수 이름, 함수 이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위가 결정된다.

→ 이걸 스코프라고 한다. **식별자가 유효한 범위**를 의미한다.

```jsx
var x = 'global';

function foo() {
  var x = 'local';
  console.log(x);  // ?
}

foo();

console.log(x); // ?
```

위의 예시에서 이름이 같은 두 변수 중 어떤 변수를 참조할지 결정이 필요한데 이를 식별자 결정(Identifier resolution)이라 한다.

Scope란 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙이라고 할 수도 있다.

엔진은 코드 실행할 때 코드의 context를 고려한다. 어디서 실행되는지 주변에 어떤 코드가 있는지에 따라 위 예제의 두 가지 경우도 다른 결과가 발생한다.

- 코드가 어디서 실행되며 주변에 어떤 코드가 있는지를 lexical environment라고 한다. 코드의 문맥 context는 렉시컬 환경으로 이뤄진다. 이를 구현한 게 실행 컨텍스트execution context이며, 모든 코드는 실행 컨텍스트에서 평가되고 실행된다.
- 스코프 체인은 실행 컨텍스트의 렉시컬 환경을 단방향으로 연결한 것이다. 전역 레시컬 환경은 코드를 읽으면 곧바로 생성되고 함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성된다. (관련해서 23장 실행 컨텍스트에서...)

그럼 스코프는 왜 필요할까?

- 스코프가 없으면 같은 이름을 갖는 변수가 충돌이 생겨 프로그램에서 하나씩 밖에 못쓰게 된다. → 그럼 이름 짓기가 너무 불편해짐.
- 컴퓨터에 폴더 만들듯이 비슷하게 스코프로 식별자인 변수 이름 충돌 방지해 같은 이름의 변수를 쓸 수 있게 함.

→ 스코프 내에서 식별자는 유일해야 하나 다른 스코프에서는 같은 이름을 사용할 수 있다. 

→ 즉, 스코픈 네임스페이스다. 

- var 키워드로 선언한 변수는 같은 스코프 내에서 중복 선언이 허용된다.
- let, const는 같은 스코프 내의 중복 선언이 허용되지 않는다.

- 스코프의 종류
    - 전역 스코프(Global scope): 코드의 가장 바깥 영역, 어디서든지 참조 가능
    - 지역 스코프(Local scope or Function-level scope): 함수 몸체 내부, 자신의 지역 스코프와 하위 지역 스코프에서 유효
    
    변수로 구분하면, 
    
    **전역 변수 (Global variable)**
    
    전역에서 선언된 변수이며 어디에든 참조할 수 있다.
    
    **지역 변수 (Local variable)**
    
    지역(함수) 내에서 선언된 변수이며 그 지역과 그 지역의 하부 지역에서만 참조할 수 있다.
    
- 스코프 체인
    - 함수가 중첩될 수 있듯이 함수의 지역 스코프도 중첩될 수 있음
    - 스코프가 함수의 중첩에 의해 계층적인 구조를 갖음
    - 중첩 함수의 지역 스코프는 중첩 함수를 포함하는 외부 함수의 지역 스코프와 계층적인 구조를 갖음.
    - 이 때 외부 함수의 지역 스코프를 중첩 함수의 상위 스코프라고 한다.
    
     
        
    - 모든 스코프는 하나의 계층적인 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프다.
    - 이렇게 스코프가 계층적으로 연결된 것을 스코프 체인이라고 한다.
    
    - **변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작해 상위 스코프 방향으로 이동하며 선언된 변수를 검색한다. (Identifier resolution)** 이를 통해 상위 스코프에서 선언한 변수를 하위 스코프에서도 참조할 수 있다.
    
    - 스코프 체인은 물리적 실체가 존재한다.
    - 위 그림과 유사한 자료구조인 렉시컬 환경을 실제로 생성한다.
    - 변수 선언이 실행되면 변수 식별자가 이 자료구조인 렉시컬 환경에 key로 등록되고, 변수 할당이 일어나면 이 자료구조의 변수 식별자에 해당하는 값을 변경한다. 변수의 검색도 이 자료구조 상에서 이뤄진다.


실행 가능한 코드가 실행될 때 실행 컨텍스트가 생성되는데 대표적으로 전역코드(Global), 함수코드가 있다.

1. 전역 코드가 생성되고,
2. 전역 컨텍스트를 만들고, 전역 코드를 순차적으로 평가한다.
3. 그러다 함수의 호출문을 만나면 새로운 실행 컨텍스트가 만들어지면서 해당 하수 실행부의 코드를 순차적으로 평가한다. 
4. Stack을 이용해 실행 컨텍스트를 관리한다. 새로운 컨텍스트가 스택에 쌓이고 실행중인 코드가 종료되면 해당 컨텍스트를 stack에서 제거한다.

**자바스크립트 스코프의 특징**

- 대부분의 C-family에서는 블록 레벨 스코프를 따른다. 코드 블록 내에서만 스코프가 유효하다.
- 자바스크립트에서는 함수 레벨 스코프를(function-level scope) 따른다. 함수 코드 블록 내에서 선언된 변수는 함수 코드 블록 내에서만 유효하고 외부에서는 유효하지 않음.
- 단, ECMAScript 6 도입 후 let 키워드를 사용하면 블록 레벨 스코프를 사용할 수 있다.

```jsx
var x = 0;
{
  var x = 1;
  console.log(x); // 1
}
console.log(x);   // 1

let y = 0;
{
  let y = 1;
  console.log(y); // 1
}
console.log(y);   // 0
```

함수 레벨 스코프

- 코드 블록이 아닌 함수에 의해서만 지역 스코프가 생김
- 대부분의 프로그래밍 언어는 함수 몸체만이 아닌 모든 코드 블록이 지역 스코프를 만든다.(if, for, while ...)
- 이런 특성을 블록 레벨 스코프라고 한다.
- 하지만 var 키워드로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코르로 인정한다. 이런 특성을 함수 레벨 스코프라고 한다. function level scope

```jsx
var x = 1;

if (true) {
  var x = 10;
}

console.log(x); // 10

// var 로 선언된 변수는 함수의 코드 블록만을 지역 스코프로 인정함
// 함수 밖에서 var로 선언시 코드 블록 내에서 선언되었어도 모두 전역 변수
// 따라서 x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언되고,
// 의도치 않게 변수 값이 변경되는 부작용이 생김
```

```jsx
var i = 10;

for (var i = 0; i < 5; i++) {
  console.log(i);
}

console.log(i); // 5

// 이 예제에서도 for 문 안의 i가 전역변수이므로 이미 선언된 전역 변수 i가 있어 중복됨
// 의도치 않게 변수 값이 변경됨
```

블록 레벨 스코프를 지원하는 프로그래밍 언어라면 for 문에서 반복을 위해 선언된 i 변수가 for문의 코드 블록 내에서만 유효한 지역 변수다. 

하지만 var로 선언된 변수는 블록 레벨 스코프를 인정하지 않으므로 i 변수가 전역 변수가 되어 값이 재할당된다. 

var 로 선언된 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정하지만 ES6에서 도입된 let, const 는 블록 레벨 스코프를 지원한다. 

렉시컬 스코프

```jsx
var x = 1;

function foo() {
  var x = 10;
  bar();
}

function bar() {
  console.log(x);
}

foo(); // ? 
bar(); // ? 

// bar는 전역으로 정의된 함수임
// 전역 코드가 실행되기 전에 먼저 평가되어 bar 함수 객체를 생성함
// 이후 bar 함수가 호출되면, 호출된 곳이 어디든 관계없이!
// 언제나 자신이 기억하고 있는 전역 스코프를 상위 스코프로 사용한다.
// 고로 위 예제 실행 시 전역 변수 x의 값 2을 2번 출력한다.
```

bar 함수의 상위 스코프가 뭘까?

고민할 것은

- 함수를 **어디서 호출했는지**에 따라 함수의 상위 스코프가 결정 → 동적 스코프(dynamic)
- 함수를 **어디서 정의했는지**에 따라 함수의 상위 스코프가 결정 → 렉시컬 스코프 또는 정적 스코프(lexical or static)

함수를 정의하는 시점에는 함수가 어디서 호출될지 모르기 때문에 호출되는 시점에 동적으로 상위 스코프를 결정해야 한다. → 그래서 동적 스코프라고 하고,

함수 정의가 평가되는 시점에 상위 스코프를 정적으로 결정하기 때문에 정적 스코프, 렉시컬 스코프라고 부른다. 

자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다. 

**함수의 상위 스코프는 함수 정의가 실행될 때 정적으로 결정된다. 함수 정의(함수 선언문 또는 함수 표현식)가 실행되어 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다. 함수가 호출될 때마다 함수의 상위 스코프를 참조할 필요가 있기 때문이다.**
